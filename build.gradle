plugins {
    id 'eclipse'
    id "java"
    id 'java-library'
    id 'maven-publish'
    id "edu.wpi.first.GradleRIO" version "2024.3.2"
    id 'com.diffplug.spotless' version '6.22.0'
    id 'com.google.protobuf' version '0.8.19'
    id "com.peterabeles.gversion" version "1.10"
}


def protobufVersion = '3.21.6'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

// Enable support for pattern matching switch statements.
tasks.withType(JavaCompile) {
    options.compilerArgs.add '--enable-preview'

    // When VSCode/EclipseJDT imports a Gradle project, it ignores the file.withProperties clause.
    // This forces generation of .settings/org.eclipse.jdt.core.prefs with all of the properties
    // specified below, which are the only way to simultaneously get bytecode that is compatible
    // with JDK 17 and have VSCode not show errors when using pattern matching switch statements.
    dependsOn tasks.withType(GenerateEclipseJdt)
}
eclipse {
    jdt {
        // Use JDK 21 in VSCode (pattern matching is no longer a preview feature in JDK 21).
        // Eclipse JDT (used as the Java engine for VSCode) doesn't support enabling previews for
        // source versions that are prior to its release version (i.e. we can't have JDK 17 with
        // preview features for the JDK 21 version of Eclipse JDT). NB: Downgrading to an earlier
        // version of JDT is not really a viable option, since modern VSCode expects a modern JDT.
        sourceCompatibility = 21

        file {
            withProperties { properties ->
                // This specific setting is required to get bytecode that is compatible with JDK 17.
                // Without this (and with sourceCompatibility = 21), the generated code tries to
                // depend on java.lang.MatchException, which was not added until JDK 19.
                properties['org.eclipse.jdt.core.compiler.compliance'] = '17'
            }
        }
    }
}

def ROBOT_MAIN_CLASS = "com.team766.hal.wpilib.RobotMain"

sourceSets {
    main {
        java {
            // NOTE(rcahoon, 2022-10-16): Gradle doesn't need this, but VSCode seems
            // to not automatically add generated classes to the classpath.
            srcDirs 'build/generated/source/proto/main/java'
            srcDirs 'build/generated/source/main/java'
            srcDirs 'build/generated/sources/annotationProcessor/java/main'
        }
    }
}

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                    // This supposedly makes Java save a heap dump on OutOfMemoryError, but
                    // unfortunately it doesn't seem to work when the error is raised due to a
                    // native allocation. https://stackoverflow.com/q/27166267
                    jvmArgs.add("-XX:+HeapDumpOnOutOfMemoryError")
                    jvmArgs.add("-XX:HeapDumpPath=/home/lvuser")
                    // This limits heap memory as a percentage (0-100) of physical memory size.
                    // `MinRAMPercentage` is a misleading name, which suggests that it is used to
                    // configure minimum heap size. Rather, the `-XX:MinRAMPercentage` JVM argument
                    // will be used to compute the maximum Java heap size only if the overall memory
                    // size in the physical machine is less than 250MB (approximately). Say suppose
                    // you are configuring `-XX:MinRAMPercentage=50` and overall physical memory is
                    // 100MB; then your java application's max heap size will be set to 50MB
                    // (i.e., 50% of 100MB). `-XX:MaxRAMPercentage` has the same effect and applies
                    // only when physical memory is larger than 250MB.
                    // Effectively, this limit should apply to RoboRIO V1 (~240MB of RAM available),
                    // but not RoboRIO V2 (~500MB of RAM available).
                    // Without this, we get errors like
                    //    OpenJDK Client VM warning: INFO: os::commit_memory(0xb3800000, 1048576, 0)
                    //    failed; error='Not enough space' (errno=12)
                    //    # There is insufficient memory for the Java Runtime Environment to continue.
                    //    # Native memory allocation (mmap) failed to map 1048576 bytes for committing
                    //    reserved memory.
                    jvmArgs.add("-XX:MinRAMPercentage=15")
                    // This makes the JVM print the heap memory size on startup.
                    jvmArgs.add("-XshowSettings:vm")
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }

                // Just the (static) config files
                configFiles(getArtifactTypeClass('FileTreeArtifact')) {
                    setDeployStage(it, 'BeforeProgramKill')
                    files = project.fileTree('src/main/deploy/configs')
                    directory = '/home/lvuser/deploy/configs'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 5.
dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    def akitJson = new groovy.json.JsonSlurper().parseText(new File(projectDir.getAbsolutePath() + "/vendordeps/AdvantageKit.json").text)
    annotationProcessor "org.littletonrobotics.akit.junction:junction-autolog:$akitJson.version"

    // our files
    implementation "com.google.protobuf:protobuf-javalite:${protobufVersion}"

    implementation files('deps/commons-math3-3.6.1.jar')
    implementation files('deps/gral-core-0.11.jar')
    // implementation "org.java-websocket:Java-WebSocket:1.4.0"
    //implementation files('deps/Java-WebSocket-1.3.9.jar')
    implementation files('deps/json-20190722.jar')

    implementation 'com.github.meanbeanlib:meanmirror:1.0.0'

    implementation 'com.google.guava:guava:33.2.1-jre'

    compileOnly project(':annotations')
    annotationProcessor project(':annotations')
}

project.compileJava.dependsOn(createVersionFile)
gversion {
    srcDir       = "build/generated/source/main/java/"
    classPackage = "com.team766"
    className    = "BuildConstants"
    dateFormat   = "yyyy-MM-dd HH:mm:ss z"
    timeZone     = "America/Los_Angeles"
    indent       = "  "
}

javadoc {
    source = sourceSets.main.allJava
}

test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    from sourceSets.main.allSource
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

// Configure string concat to always inline compile
tasks.withType(JavaCompile) {
    options.compilerArgs.add '-XDstringConcat=inline'
}

repositories {
    mavenCentral()

    gradlePluginPortal()  // for protobuf

    maven { url = uri('https://frcmaven.wpi.edu/artifactory/release/') }

    // CTRE
    maven { url = uri('https://devsite.ctr-electronics.com/maven/release/') }

    // REV
    maven { url = uri('https://maven.revrobotics.com/') }

    maven {
        url = uri("https://maven.pkg.github.com/Mechanical-Advantage/AdvantageKit")
        credentials {
            username = "Mechanical-Advantage-Bot"
            password = "\u0067\u0068\u0070\u005f\u006e\u0056\u0051\u006a\u0055\u004f\u004c\u0061\u0079\u0066\u006e\u0078\u006e\u0037\u0051\u0049\u0054\u0042\u0032\u004c\u004a\u006d\u0055\u0070\u0073\u0031\u006d\u0037\u004c\u005a\u0030\u0076\u0062\u0070\u0063\u0051"
        }
    }

    mavenLocal()
}

configurations.all {
    exclude group: "edu.wpi.first.wpilibj"
}

task(checkAkitInstall, dependsOn: "classes", type: JavaExec) {
    mainClass = "org.littletonrobotics.junction.CheckInstall"
    classpath = sourceSets.main.runtimeClasspath
}
compileJava.finalizedBy checkAkitInstall

spotless {
    ratchetFrom 'origin/main' // only check files that have changed relative to main
    java {
        target fileTree('.') {
            include '**/*.java'
            exclude '**/build/**', '**/build-*/**'
        }
        toggleOffOn()
        palantirJavaFormat('2.39.0').style("AOSP")
        removeUnusedImports()
        importOrder()
        trimTrailingWhitespace()
        endWithNewline()
    }
    groovyGradle {
        target fileTree('.') {
            include '**/*.gradle'
            exclude '**/build/**', '**/build-*/**'
        }
        greclipse()
        indentWithSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
    }
    format 'xml', {
        target fileTree('.') {
            include '**/*.xml'
            exclude '**/build/**', '**/build-*/**'
        }
        eclipseWtp('xml')
        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
    }
    format 'misc', {
        target fileTree('.') {
            include '**/*.md', '**/.gitignore'
            exclude '**/build/**', '**/build-*/**'
        }
        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
    }
}

protobuf {
    // Configure the protoc executable
    protoc {
        // Download from repositories
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }


    plugins {
        javalite {
            // The codegen for lite comes as a separate artifact
            artifact = 'com.google.protobuf:protoc-gen-javalite:${protobufVersion}'
        }
    }

    generateProtoTasks {
        all().configureEach { task ->
            task.builtins {
                java {
                    option "lite"
                }
            }
        }
    }
}

// This processes any files ending in .template into generated code.
// Uses Groovy's SimpleTemplateEngine
// https://docs.groovy-lang.org/latest/html/documentation/template-engines.html#_simpletemplateengine
task expandTemplates(type: Copy) {
    from('src') {
        include '**/*.template'
    }
    includeEmptyDirs = false
    into 'src'
    expand(functionArity: 8)
    rename { String fileName ->
        fileName.replace(".template", "")
    }
}
