/** Generated from the template in ResourcesMixin.java.template */

package com.team766.framework.resources;

import com.team766.library.function.Functions.*;
import com.team766.library.function.Functions.Runnable;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.Subsystem;
import java.util.List;

public interface ResourcesMixin {
    ResourceManager getResourceManager();

    // 0 RobotSystems

    default void whileAvailable(Provider<Command> callback) {
        getResourceManager().scheduleIfAvailable(callback, List.of(), subsystems -> callback.get());
    }

    default void onceAvailable(Provider<Command> callback) {
        getResourceManager().scheduleOnceIfAvailable(callback, List.of(), subsystems -> callback.get());
    }

    default void repeatedly(Runnable callback) {
        callback.run();
    }

    default void once(Runnable callback) {
        getResourceManager().runOnceIfAvailable(callback, List.of(), subsystems -> callback.run());
    }

<% (1..functionArity).each{ i -> %>
    // ${i} RobotSystems

    @SuppressWarnings("unchecked")
    default <
<% (0..<i-1).each{ j -> %>\
                    RobotSystem${j} extends Subsystem & Reservable,
<%}%>\
                    RobotSystem${i-1} extends Subsystem & Reservable>
            boolean whileAvailable(
<% (0..<i).each{ j -> %>\
                    Guarded<RobotSystem${j}> subsystem${j},
<%}%>\
                    Function${i}<
<% (0..<i).each{ j -> %>\
                                    RobotSystem${j},
<%}%>\
                                    Command>
                            callback) {
        return getResourceManager().scheduleIfAvailable(
            callback,
            List.of(
<% (0..<i-1).each{ j -> %>\
                subsystem${j},
<%}%>\
                subsystem${i-1}),
            subsystems -> {
                return callback.apply(
<% (0..<i-1).each{ j -> %>\
                        (RobotSystem${j}) subsystems[${j}],
<%}%>\
                        (RobotSystem${i-1}) subsystems[${i-1}]);
            });
    }

    default <
<% (0..<i).each{ j -> %>\
                    RobotSystem${j} extends Subsystem & Reservable,
<%}%>\
                    T>
            boolean whileAvailable(
<% (0..<i).each{ j -> %>\
                    Guarded<RobotSystem${j}> subsystem${j},
<%}%>\
                    InvalidReturnType.Function${i}<
<% (0..<i).each{ j -> %>\
                                    RobotSystem${j},
<%}%>\
                                    T>
                            callback) {
        return false;
    }

    @SuppressWarnings("unchecked")
    default <
<% (0..<i-1).each{ j -> %>\
                    RobotSystem${j} extends Subsystem & Reservable,
<%}%>\
                    RobotSystem${i-1} extends Subsystem & Reservable>
            void onceAvailable(
<% (0..<i).each{ j -> %>\
                    Guarded<RobotSystem${j}> subsystem${j},
<%}%>\
                    Function${i}<
<% (0..<i).each{ j -> %>\
                                    RobotSystem${j},
<%}%>\
                                    Command>
                            callback) {
        getResourceManager().scheduleOnceIfAvailable(
            callback,
            List.of(
<% (0..<i-1).each{ j -> %>\
                subsystem${j},
<%}%>\
                subsystem${i-1}),
            subsystems -> {
                return callback.apply(
<% (0..<i-1).each{ j -> %>\
                        (RobotSystem${j}) subsystems[${j}],
<%}%>\
                        (RobotSystem${i-1}) subsystems[${i-1}]);
            });
    }

    default <
<% (0..<i).each{ j -> %>\
                    RobotSystem${j} extends Subsystem & Reservable,
<%}%>\
                    T>
            void onceAvailable(
<% (0..<i).each{ j -> %>\
                    Guarded<RobotSystem${j}> subsystem${j},
<%}%>\
                    InvalidReturnType.Function${i}<
<% (0..<i).each{ j -> %>\
                                    RobotSystem${j},
<%}%>\
                                    T>
                            callback) {
    }

    @SuppressWarnings("unchecked")
    default <
<% (0..<i-1).each{ j -> %>\
                    RobotSystem${j} extends Subsystem & Reservable,
<%}%>\
                    RobotSystem${i-1} extends Subsystem & Reservable>
            boolean whileAvailable(
<% (0..<i).each{ j -> %>\
                    Guarded<RobotSystem${j}> subsystem${j},
<%}%>\
                    Consumer${i}<
<% (0..<i-1).each{ j -> %>\
                                    RobotSystem${j},
<%}%>\
                                    RobotSystem${i-1}>
                            callback) {
        return getResourceManager().runIfAvailable(
            callback,
            List.of(
<% (0..<i-1).each{ j -> %>\
                subsystem${j},
<%}%>\
                subsystem${i-1}),
            subsystems -> {
                callback.accept(
<% (0..<i-1).each{ j -> %>\
                        (RobotSystem${j}) subsystems[${j}],
<%}%>\
                        (RobotSystem${i-1}) subsystems[${i-1}]);
            });
    }

    @SuppressWarnings("unchecked")
    default <
<% (0..<i-1).each{ j -> %>\
                    RobotSystem${j} extends Subsystem & Reservable,
<%}%>\
                    RobotSystem${i-1} extends Subsystem & Reservable>
            void onceAvailable(
<% (0..<i).each{ j -> %>\
                    Guarded<RobotSystem${j}> subsystem${j},
<%}%>\
                    Consumer${i}<
<% (0..<i-1).each{ j -> %>\
                                    RobotSystem${j},
<%}%>\
                                    RobotSystem${i-1}>
                            callback) {
        getResourceManager().runOnceIfAvailable(
            callback,
            List.of(
<% (0..<i-1).each{ j -> %>\
                subsystem${j},
<%}%>\
                subsystem${i-1}),
            subsystems -> {
                callback.accept(
<% (0..<i-1).each{ j -> %>\
                        (RobotSystem${j}) subsystems[${j}],
<%}%>\
                        (RobotSystem${i-1}) subsystems[${i-1}]);
            });
    }

    default <
<% (0..<i-1).each{ j -> %>\
                    RobotSystem${j} extends Subsystem & Reservable,
<%}%>\
                    RobotSystem${i-1} extends Subsystem & Reservable>
            void byDefault(
<% (0..<i).each{ j -> %>\
                    Guarded<RobotSystem${j}> subsystem${j},
<%}%>\
                    Function${i}<
<% (0..<i).each{ j -> %>\
                                    RobotSystem${j},
<%}%>\
                                    Command>
                            callback) {
        getResourceManager().registerTransientEndFrameCallback(() -> whileAvailable(
<% (0..<i).each{ j -> %>\
            subsystem${j},
<%}%>\
            callback));
    }

    default <
<% (0..<i).each{ j -> %>\
                    RobotSystem${j} extends Subsystem & Reservable,
<%}%>\
                    T>
            void byDefault(
<% (0..<i).each{ j -> %>\
                    Guarded<RobotSystem${j}> subsystem${j},
<%}%>\
                    InvalidReturnType.Function${i}<
<% (0..<i).each{ j -> %>\
                                    RobotSystem${j},
<%}%>\
                                    T>
                            callback) {
    }

    default <
<% (0..<i-1).each{ j -> %>\
                    RobotSystem${j} extends Subsystem & Reservable,
<%}%>\
                    RobotSystem${i-1} extends Subsystem & Reservable>
            void byDefault(
<% (0..<i).each{ j -> %>\
                    Guarded<RobotSystem${j}> subsystem${j},
<%}%>\
                    Consumer${i}<
<% (0..<i-1).each{ j -> %>\
                                    RobotSystem${j},
<%}%>\
                                    RobotSystem${i-1}>
                            callback) {
        getResourceManager().registerTransientEndFrameCallback(() -> whileAvailable(
<% (0..<i).each{ j -> %>\
            subsystem${j},
<%}%>\
            callback));
    }
<%}%>
}