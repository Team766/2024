/** Generated from the template in ResourcesMixin.java.template */

package com.team766.framework.resources;

import com.team766.library.function.Functions.*;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.Subsystem;

public interface ResourcesMixin {
    ResourceManager getResourceManager();

<% (1..functionArity).each{ i -> %>
    // ${i} subsystems

    @SuppressWarnings("unchecked")
    default <
<% (0..<i-1).each{ j -> %>\
                    Subsystem${j} extends Subsystem & Reservable,
<%}%>\
                    Subsystem${i-1} extends Subsystem & Reservable>
            boolean ifAvailable(
                    Function${i}<
<% (0..<i).each{ j -> %>\
                                    Subsystem${j},
<%}%>\
                                    Command>
                            callback) {
        return getResourceManager().scheduleIfAvailable(callback, subsystems -> {
            return callback.apply(
<% (0..<i-1).each{ j -> %>\
                    (Subsystem${j}) subsystems[${j}],
<%}%>\
                    (Subsystem${i-1}) subsystems[${i-1}]);
        });
    }

    @SuppressWarnings("unchecked")
    default <
<% (0..<i-1).each{ j -> %>\
                    Subsystem${j} extends Subsystem & Reservable,
<%}%>\
                    Subsystem${i-1} extends Subsystem & Reservable>
            boolean ifAvailable(
                    Consumer${i}<
<% (0..<i-1).each{ j -> %>\
                                    Subsystem${j},
<%}%>\
                                    Subsystem${i-1}>
                            callback) {
        return getResourceManager().runIfAvailable(callback, subsystems -> {
            callback.accept(
<% (0..<i-1).each{ j -> %>\
                    (Subsystem${j}) subsystems[${j}],
<%}%>\
                    (Subsystem${i-1}) subsystems[${i-1}]);
        });
    }

    default <
<% (0..<i-1).each{ j -> %>\
                    Subsystem${j} extends Subsystem & Reservable,
<%}%>\
                    Subsystem${i-1} extends Subsystem & Reservable>
            void byDefault(
                    Function${i}<
<% (0..<i).each{ j -> %>\
                                    Subsystem${j},
<%}%>\
                                    Command>
                            callback) {
        getResourceManager().registerTransientEndFrameCallback(() -> ifAvailable(callback));
    }

    default <
<% (0..<i-1).each{ j -> %>\
                    Subsystem${j} extends Subsystem & Reservable,
<%}%>\
                    Subsystem${i-1} extends Subsystem & Reservable>
            void byDefault(
                    Consumer${i}<
<% (0..<i-1).each{ j -> %>\
                                    Subsystem${j},
<%}%>\
                                    Subsystem${i-1}>
                            callback) {
        getResourceManager().registerTransientEndFrameCallback(() -> ifAvailable(callback));
    }
<%}%>
}